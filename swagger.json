{
  "swagger" : "2.0",
  "info" : {
    "description" : "keep track of your time",
    "version" : "0.0.1",
    "title" : "Time Keeping"
  },
  "schemes" : [ "https", "http" ],
  "paths" : {
    "/api/v1/todos" : {
      "post" : {
        "tags" : [ "ToDo" ],
        "summary" : "Adds a new ToDo",
        "description" : "",
        "operationId" : "todoController.create",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Todo object that needs to be added",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Todo"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "ToDo Created"
          },
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "todostore_auth" : [ "write:todos" ]
        } ]
      }
    },
    "/api/v1/todos/all" : {
      "get" : {
        "tags" : [ "ToDo" ],
        "summary" : "Returns all the ToDos",
        "description" : "",
        "operationId" : "todoController.list",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successful Operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Todo"
              }
            }
          },
          "500" : {
            "description" : "Something went wrong on the server"
          }
        },
        "security" : [ {
          "todostore_auth" : [ "read:todos" ]
        } ]
      }
    },
    "/api/v1/todos/{todo_id}" : {
      "get" : {
        "tags" : [ "ToDo" ],
        "summary" : "Returns the ToDo with the id if it exists",
        "description" : "",
        "operationId" : "todoController.find",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "todo_id",
          "in" : "path",
          "description" : "The id of the coresponding ToDo",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful Operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Todo"
              }
            }
          },
          "400" : {
            "description" : "Invalid status value"
          }
        },
        "security" : [ {
          "todostore_auth" : [ "write:todos", "read:todos" ]
        } ]
      },
      "put" : {
        "tags" : [ "ToDo" ],
        "summary" : "Updates an existing ToDo",
        "description" : "",
        "operationId" : "todoController.update",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "todo_id",
          "in" : "path",
          "description" : "The id of the coresponding ToDo",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Todo object that needs to be updated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Todo"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Todo not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        },
        "security" : [ {
          "todostore_auth" : [ "write:todos", "read:todos" ]
        } ]
      },
      "delete" : {
        "tags" : [ "ToDo" ],
        "summary" : "Deletes a ToDo",
        "description" : "",
        "operationId" : "deleteToDo",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "api_key",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "todo_id",
          "in" : "path",
          "description" : "The id of the coresponding ToDo",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted ToDo"
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Todo not found"
          }
        },
        "security" : [ {
          "todostore_auth" : [ "write:todos", "read:todos" ]
        } ]
      }
    },
    "/api/v1/users" : {
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Adda a new User",
        "description" : "",
        "operationId" : "userController.create",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "User object that needs to be added",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/User"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "User Created"
          },
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "todostore_auth" : [ "write:users" ]
        } ]
      }
    },
    "/api/v1/users/{user_id}" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Returns the User with the id if it exists",
        "description" : "",
        "operationId" : "userController.find",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "user_id",
          "in" : "path",
          "description" : "The id of the coresponding User",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful Operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/User"
              }
            }
          },
          "400" : {
            "description" : "Invalid status value"
          }
        },
        "security" : [ {
          "todostore_auth" : [ "read:users" ]
        } ]
      },
      "put" : {
        "tags" : [ "Users" ],
        "summary" : "Update an existing User",
        "description" : "",
        "operationId" : "userController.update",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "user_id",
          "in" : "path",
          "description" : "The id of the coresponding User",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "User object that needs to be updated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/User"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "User not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        },
        "security" : [ {
          "todostore_auth" : [ "write:users" ]
        } ]
      },
      "delete" : {
        "tags" : [ "Users" ],
        "summary" : "Deletes a User",
        "description" : "",
        "operationId" : "userController.delete",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "api_key",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "user_id",
          "in" : "path",
          "description" : "The id of the coresponding User",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted User"
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        },
        "security" : [ {
          "todostore_auth" : [ "write:users" ]
        } ]
      }
    }
  },
  "securityDefinitions" : {
    "todostore_auth" : {
      "type" : "oauth2",
      "authorizationUrl" : "http://ToDoStore.swagger.io/oauth/dialog",
      "flow" : "implicit",
      "scopes" : {
        "write:todos" : "modify todos",
        "read:todos" : "read todos",
        "write:users" : "modify users",
        "read:users" : "read users"
      }
    },
    "api_key" : {
      "type" : "apiKey",
      "name" : "api_key",
      "in" : "header"
    }
  },
  "definitions" : {
    "Todo" : {
      "type" : "object",
      "required" : [ "content", "createdBy" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "content" : {
          "type" : "string",
          "example" : "do the dishes"
        },
        "createdBy" : {
          "type" : "integer",
          "format" : "int64"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "completed", "pending", "new", "abandoned" ]
        }
      },
      "xml" : {
        "name" : "ToDo"
      }
    },
    "User" : {
      "type" : "object",
      "required" : [ "email", "firstName" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "firstName" : {
          "type" : "string",
          "example" : "Marcel"
        },
        "lastName" : {
          "type" : "string",
          "example" : "Popescu"
        },
        "email" : {
          "type" : "string",
          "example" : "marcel.popescu@gmail.com"
        }
      },
      "xml" : {
        "name" : "User"
      }
    }
  }
}