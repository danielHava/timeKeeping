{
  "swagger" : "2.0",
  "info" : {
    "description" : "keep track of your time",
    "version" : "1.0.0",
    "title" : "Time Keeping"
  },
  "schemes" : [ "https", "http" ],
  "paths" : {
    "/api/v1/auth/register" : {
      "post" : {
        "tags" : [ "Auth" ],
        "summary" : "Registers a new User and returns a token.",
        "description" : "",
        "operationId" : "authController.register",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "User object that needs to be added",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/User"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "User has been created."
          },
          "403" : {
            "description" : "Failed to register User."
          }
        },
        "security" : [ {
          "taskstore_auth" : [ "write:Users" ]
        } ]
      }
    },
    "/api/v1/auth/login" : {
      "post" : {
        "tags" : [ "Auth" ],
        "summary" : "Returns a token for an existing User.",
        "description" : "",
        "operationId" : "authController.login",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "email",
          "in" : "body",
          "type": "string",
          "example": "marcel.popescu@gmail.com",
          "description" : "Email of the User logging in.",
          "required" : true }, {
          "name" : "password",
          "in" : "body",
          "type": "string",
          "example": "parolamarcel",
          "description" : "Password of the User logging in.",
          "required" : true
        } ],
        "responses" : {
          "201" : {
            "description" : "User authenticated."
          },
          "401" : {
            "description" : "Invalid password."
          },
          "500" : {
            "description" : "Error on server."
          }
        },
        "security" : [ {
          "taskstore_auth" : [ "write:Users" ]
        } ]
      }
    },
    "/api/v1/auth/me" : {
      "get" : {
        "tags" : [ "Auth" ],
        "summary" : "Returns the User who is the supplied token bearer.",
        "description" : "",
        "operationId" : "authController.details",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "header",
          "name" : "x-access-token",
          "example": "eyJhbGciOiJIUzn1uiIsInR5cCI6IkpXVCJ9.eyJpZCI6MjAsImlhdCI6MTU1MTE5NDM3MywiZXhwIjoxNTUxMjgwNzczfQ.qP_drsMHA9vqxC8gfLmXJRWH1jjYpYWHDUkJ-hJiwTA",
          "description" : "Supply a valid token.",
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "User found"
          },
          "404" : {
            "description" : "User not found"
          },
          "500" : {
            "description" : "Error on server"
          }
        },
        "security" : [ {
          "taskstore_auth" : [ "read:Users" ]
        } ]
      }
    },
    "/api/v1/tasks" : {
      "post" : {
        "tags" : [ "Task" ],
        "summary" : "Adds a new Task",
        "description" : "",
        "operationId" : "taskController.create",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Task object that needs to be added",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Task"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Task Created"
          },
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "taskstore_auth" : [ "write:tasks" ]
        } ]
      }
    },
    "/api/v1/tasks/all" : {
      "get" : {
        "tags" : [ "Task" ],
        "summary" : "Returns all the Tasks",
        "description" : "",
        "operationId" : "taskController.list",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successful Operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Task"
              }
            }
          },
          "500" : {
            "description" : "Something went wrong on the server"
          }
        },
        "security" : [ {
          "taskstore_auth" : [ "read:tasks" ]
        } ]
      }
    },
    "/api/v1/tasks/{task_id}" : {
      "get" : {
        "tags" : [ "Task" ],
        "summary" : "Returns the Task with the id if it exists",
        "description" : "",
        "operationId" : "taskController.find",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "task_id",
          "in" : "path",
          "description" : "The id of the coresponding Task",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful Operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Task"
              }
            }
          },
          "400" : {
            "description" : "Invalid status value"
          }
        },
        "security" : [ {
          "taskstore_auth" : [ "write:tasks", "read:tasks" ]
        } ]
      },
      "put" : {
        "tags" : [ "Task" ],
        "summary" : "Updates an existing Task",
        "description" : "",
        "operationId" : "taskController.update",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "task_id",
          "in" : "path",
          "description" : "The id of the coresponding Task",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Task object that needs to be updated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Task"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Task not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        },
        "security" : [ {
          "taskstore_auth" : [ "write:tasks", "read:tasks" ]
        } ]
      },
      "delete" : {
        "tags" : [ "Task" ],
        "summary" : "Deletes a Task",
        "description" : "",
        "operationId" : "taskController.destroy",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "api_key",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "task_id",
          "in" : "path",
          "description" : "The id of the coresponding task",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted task"
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Task not found"
          }
        },
        "security" : [ {
          "taskstore_auth" : [ "write:tasks", "read:tasks" ]
        } ]
      }
    },
    "/api/v1/users" : {
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Adda a new User",
        "description" : "",
        "operationId" : "userController.create",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "User object that needs to be added",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/User"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "User Created"
          },
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "taskstore_auth" : [ "write:users" ]
        } ]
      }
    },
    "/api/v1/users/{user_id}" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Returns the User with the id if it exists",
        "description" : "",
        "operationId" : "userController.find",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "user_id",
          "in" : "path",
          "description" : "The id of the coresponding User",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful Operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/User"
              }
            }
          },
          "400" : {
            "description" : "Invalid status value"
          }
        },
        "security" : [ {
          "taskstore_auth" : [ "read:users" ]
        } ]
      },
      "put" : {
        "tags" : [ "Users" ],
        "summary" : "Update an existing User",
        "description" : "",
        "operationId" : "userController.update",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "user_id",
          "in" : "path",
          "description" : "The id of the coresponding User",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "User object that needs to be updated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/User"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "User not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        },
        "security" : [ {
          "taskstore_auth" : [ "write:users" ]
        } ]
      },
      "delete" : {
        "tags" : [ "Users" ],
        "summary" : "Deletes a User",
        "description" : "",
        "operationId" : "userController.delete",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "api_key",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "user_id",
          "in" : "path",
          "description" : "The id of the coresponding User",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted User"
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        },
        "security" : [ {
          "taskstore_auth" : [ "write:users" ]
        } ]
      }
    }
  },
  "securityDefinitions" : {
    "taskstore_auth" : {
      "type" : "oauth2",
      "authorizationUrl" : "http://Taskstore.swagger.io/oauth/dialog",
      "flow" : "implicit",
      "scopes" : {
        "write:tasks" : "modify tasks",
        "read:tasks" : "read tasks",
        "write:users" : "modify users",
        "read:users" : "read users"
      }
    },
    "api_key" : {
      "type" : "apiKey",
      "name" : "api_key",
      "in" : "header"
    }
  },
  "definitions" : {
    "Task" : {
      "type" : "object",
      "required" : [ "content", "title" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "title" : {
          "type" : "string",
          "example" : "what to do"
        },
        "content" : {
          "type" : "string",
          "example" : "do the dishes"
        },
        "createdBy" : {
          "type" : "integer",
          "format" : "int64"
        },
        "onGoing" : {
          "type" : "boolean",
          "example" : "true"
        },
        "duration" : {
          "type" : "string",
          "example" : "2 hours"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "completed", "pending", "new", "abandoned" ]
        }
      },
      "xml" : {
        "name" : "Task"
      }
    },
    "User" : {
      "type" : "object",
      "required" : [ "email", "firstName", "lastName", "password", "role" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "firstName" : {
          "type" : "string",
          "example" : "Marcel"
        },
        "lastName" : {
          "type" : "string",
          "example" : "Popescu"
        },
        "email" : {
          "type" : "string",
          "example" : "marcel.popescu@gmail.com"
        },
        "password" : {
          "type" : "string",
          "example" : "parolamarcel"
        },
        "role" : {
          "type" : "string",
          "enum" : [ "user", "manager", "admin" ]
        },
        "preferredHours" : {
          "type" : "string",
          "example" : "9-5"
        }
      },
      "xml" : {
        "name" : "User"
      }
    }
  }
}